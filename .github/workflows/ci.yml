name: CI - backend tests

on:
  pull_request:
  push:
    branches: [ main ]

jobs:
  test-backend:
    runs-on: windows-latest
    strategy:
      matrix:
        python-version: [3.7]
    env:
      MJ_ADMIN_TOKEN: ${{ secrets.MJ_ADMIN_TOKEN }}  # set this in repo secrets if admin endpoints are protected
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Warn if MJ_ADMIN_TOKEN not set (non-blocking)
        shell: powershell
        run: |
          if (-not $env:MJ_ADMIN_TOKEN -or $env:MJ_ADMIN_TOKEN -eq "") {
            Write-Warning "MJ_ADMIN_TOKEN secret is not set. Admin endpoints will be accessible without a token during CI. This is OK for development but not recommended for production."
          } else {
            Write-Host "MJ_ADMIN_TOKEN is provided via repository secrets."
          }

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        working-directory: ./backend
        shell: powershell
        run: |
          python -m pip install --upgrade pip
          if (Test-Path requirements.txt) { pip install -r requirements.txt } else { pip install fastapi uvicorn[standard] websocket-client requests pytest }

      - name: Start uvicorn backend (background) and redirect logs
        working-directory: ./backend
        shell: powershell
        run: |
          Write-Host "Starting uvicorn and redirecting output to uvicorn.log..."
          # Start uvicorn in background, redirect stdout/stderr to uvicorn.log
          Start-Process -FilePath python -ArgumentList '-m uvicorn app:app --host 127.0.0.1 --port 8000' -NoNewWindow -RedirectStandardOutput .\uvicorn.log -RedirectStandardError .\uvicorn.log
          # give uvicorn more time to startup
          Start-Sleep -s 12
          Write-Host "uvicorn started (background)."

      - name: Wait for backend to respond (probe)
        working-directory: ./backend
        shell: powershell
        run: |
          $ok = $false
          $deadline = (Get-Date).AddSeconds(30)
          while ((Get-Date) -lt $deadline) {
            try {
              $r = Invoke-WebRequest "http://127.0.0.1:8000/openapi.json" -UseBasicParsing -ErrorAction Stop
              if ($r.StatusCode -eq 200) { $ok = $true; break }
            } catch { Start-Sleep -s 1 }
          }
          if (-not $ok) {
            Write-Warning "Backend did not respond at http://127.0.0.1:8000 within 30s. Contents of uvicorn.log:"
            Get-Content .\uvicorn.log -Tail 200 | Write-Host
            exit 1
          } else {
            Write-Host "Backend responded to probe."
          }

      - name: Run pytest (unit/integration)
        working-directory: ./backend
        shell: powershell
        run: |
          pytest -q --maxfail=1

      - name: Run run_demo_flow (PowerShell) to exercise REST flow
        working-directory: ./backend
        shell: powershell
        run: |
          .\scripts\run_demo_flow.ps1

      - name: Run websocket integration script (Python)
        working-directory: ./backend
        shell: powershell
        run: |
          python .\scripts\ws_test.py

      - name: Upload backend logs (if any)
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: backend-logs
          path: backend/*.log