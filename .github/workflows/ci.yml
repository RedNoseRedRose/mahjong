name: CI - backend tests

on:
  pull_request:
  push:
    branches: [ master, main ]

jobs:
  test-backend:
    runs-on: windows-latest
    strategy:
      matrix:
        python-version: [3.7]
    env:
      MJ_ADMIN_TOKEN: ${{ secrets.MJ_ADMIN_TOKEN }}  # set this in repo secrets if admin endpoints are protected
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Warn if MJ_ADMIN_TOKEN not set (non-blocking)
        shell: powershell
        run: |
          if (-not $env:MJ_ADMIN_TOKEN -or $env:MJ_ADMIN_TOKEN -eq "") {
            Write-Warning "MJ_ADMIN_TOKEN secret is not set. Admin endpoints will be accessible without a token during CI. This is OK for development but not recommended for production."
          } else {
            Write-Host "MJ_ADMIN_TOKEN is provided via repository secrets."
          }

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        working-directory: ./backend
        shell: powershell
        run: |
          python -m pip install --upgrade pip
          if (Test-Path requirements.txt) {
              Write-Host 'Installing from requirements.txt'
              python -m pip install --upgrade -r requirements.txt
          } else {
              Write-Host 'No requirements.txt â€” installing common deps'
          }
          Write-Host 'Ensuring uvicorn, pydantic-settings and test deps are installed'
          python -m pip install --upgrade 'uvicorn[standard]' fastapi 'pydantic-settings' websocket-client requests pytest --no-cache-dir
          Write-Host 'Installed packages (summary):'
          python -m pip list --disable-pip-version-check

      - name: Start uvicorn backend (background) and redirect logs
        working-directory: ./backend
        shell: powershell
        run: |
          Write-Host "Starting uvicorn and redirecting output to uvicorn.out / uvicorn.err..."
          # Start uvicorn in background, redirect stdout and stderr to separate files (Start-Process doesn't accept same file for both)
          Start-Process -FilePath python -ArgumentList '-m uvicorn app:app --host 127.0.0.1 --port 8000' -NoNewWindow -RedirectStandardOutput .\uvicorn.out -RedirectStandardError .\uvicorn.err
          # give uvicorn more time to startup
          Start-Sleep -s 12
          Write-Host "uvicorn started (background)."

      - name: Wait for backend to accept TCP connections (probe)
        working-directory: ./backend
        shell: powershell
        run: |
          $ok = $false
          $deadline = (Get-Date).AddSeconds(90)
          while ((Get-Date) -lt $deadline) {
            foreach ($addr in @('127.0.0.1','::1')) {
              try {
                $c = New-Object System.Net.Sockets.TcpClient
                $ar = $c.BeginConnect($addr, 8000, $null, $null)
                if ($ar.AsyncWaitHandle.WaitOne(1000)) {
                  $c.EndConnect($ar)
                  $c.Close()
                  $ok = $true
                  break
                } else {
                  $c.Close()
                }
              } catch { }
            }
            if ($ok) { break }
            Start-Sleep -Seconds 1
          }
          if (-not $ok) {
            Write-Warning "Backend did not accept TCP connections on 127.0.0.1 or ::1:8000 within 90s. Last lines of uvicorn logs:"
            if (Test-Path .\uvicorn.out) { Get-Content .\uvicorn.out -Tail 200 | Write-Host }
            if (Test-Path .\uvicorn.err) { Get-Content .\uvicorn.err -Tail 200 | Write-Host }
            exit 1
          } else {
            Write-Host "Backend TCP port is open."
          }

      - name: Run pytest (unit/integration)
        working-directory: ./backend
        shell: powershell
        run: |
          pytest -q --maxfail=1

      - name: Run run_demo_flow (PowerShell) to exercise REST flow
        working-directory: ./backend
        shell: powershell
        run: |
          .\scripts\run_demo_flow.ps1

      - name: Run websocket integration script (Python)
        working-directory: ./backend
        shell: powershell
        run: |
          python .\scripts\ws_test.py

      - name: Upload backend logs (if any)
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: backend-logs
          path: backend/*.log